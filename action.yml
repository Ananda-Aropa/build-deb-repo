name: 'aaropa_builder_repo'
description: |
  Build a DEB repository for the specified packages
inputs:
  label:
    description: |
      Project name
    required: true
  origin:
    description: |
      Project origin name or domain name
    required: false
  desc:
    description: |
      Repository description
    required: true
    default: ""
  codename:
    description: |
      Project target distro codename
    required: true
    default: unstable
  architectures:
    description: |
      List of architectures of packages
    required: true
    default: |
      source
      amd64
  components:
    description: |
      Repository components
    required: true
    default: main
  udeb_components:
    description: |
      Repository UDeb components
    required: true
    default: main
  gpg_signing_key:
    description: |
      The GPG key to use for signing the package in the repo
    required: false
  maintainer:
    description: |
      The maintainer of the packages signed with gpg_signing_key
    required: false
  from_metadatas:
    description: |
      List of package metadata to include in the repository
    required: true
  from_github_actions:
    description: |
      List of GitHub Actions generated metadata artifacts to include in the repository (format: owner/repo<@ref><:workflow_id>)
    required: true
    default: ""
  from_deb_packages:
    description: |
      List of DEB packages to include in the repository
    required: true
    default: ""
  downloader:
    description: |
      Downloader to download packages (aria2c, curl, wget)
    required: true
    default: wget
  max_download_retries:
    description: |
      Maximum amount of attempts to retry downloading target file
    required: true
    default: "5"
  download_retry_wait:
    description: |
      Time to wait before each retry attempts
    required: true
    default: "10"
  github_token:
    description: |
      GitHub token to use for authentication
    required: true
    default: "<GITHUB_TOKEN>"
  github_username:
    description: |
      GitHub username to use for authentication
    required: true
    default: "<GITHUB_USERNAME>"
outputs:
  placeholder:
    description: ""
    value: "dist.zip"
runs:
  using: "composite"
  steps:
    - name: Generate distributions file
      env:
        GPG_SIGNING_KEY: ${{ inputs.gpg_signing_key }}
        MAINTAINER: ${{ inputs.maintainer }}
      run: |
        ORIGIN='${{ inputs.origin }}'
        [ ! $ORIGIN ] && ORIGIN='${{ inputs.label }}'
        ARCH=$(echo '${{ inputs.architectures }}' | tr '\n' ' ')
        COMPONENT=$(echo '${{ inputs.components }}' | tr '\n' ' ')
        UDEB_COMPONENT=$(echo '${{ inputs.udeb_components }}' | tr '\n' ' ')
        mkdir -p dist/conf
        echo "Origin: $ORIGIN" >>dist/conf/distributions
        echo 'Label: ${{ inputs.label }}' >>dist/conf/distributions
        echo 'Codename: ${{ inputs.codename }}' >>dist/conf/distributions
        echo "Architectures: $ARCH" >>dist/conf/distributions
        echo "Components: $COMPONENT" >>dist/conf/distributions
        echo "UDebComponents: $UDEB_COMPONENT" >>dist/conf/distributions
        echo 'Description: ${{ inputs.desc }}' >>dist/conf/distributions
        if [ "$GPG_SIGNING_KEY" ]; then
          KEY_OWNER=$(echo "$GPG_SIGNING_KEY" | gpg --import 2>&1 | grep -i ': public key "' | awk -F '"' '{print $2}')
          if [ ! "$MAINTAINER" ]; then
            MAINTAINER=$KEY_OWNER
          fi
          echo "DEBEMAIL='$(echo $MAINTAINER | awk -F '<' '{print $2}' | awk -F '>' '{print $1}')'" >>"$GITHUB_OUTPUT"
          echo "DEBFULLNAME='$(echo $MAINTAINER | awk -F '<' '{print $1}')'" >>"$GITHUB_OUTPUT"
          source "$GITHUB_OUTPUT"
          KEY_FINGERPRINT=$(gpg --list-secret-key --with-subkey-fingerprint | grep -A3 "$MAINTAINER" | tail -2)
          echo "SignWith: $KEY_FINGERPRINT" >>dist/conf/distributions
        fi
        cat dist/conf/distributions
      shell: bash

    - name: Copy source scripts
      run: cp -r ${{ github.action_path }}/{repo-download,debsign,build-entry}.sh .
      shell: bash

    - name: Getting need packages
      run: |
        sudo apt update && sudo apt -y upgrade
        sudo apt install -y aria2 wget reprepro gnupg2
      shell: bash

    - name: Generate repo artifact
      env:
        METADATA_LINKS: ${{ inputs.from_metadatas }}
        ACTION_LINKS: ${{ inputs.from_github_actions }}
        DEB_LINKS: ${{ inputs.from_deb_packages }}
        RELEASE: ${{ inputs.codename }}
        MAX_RETRIES: ${{ inputs.max_download_retries }}
        RETRY_WAIT: ${{ inputs.download_retry_wait }}
        DL: ${{ inputs.downloader }}
        USERNAME: ${{ inputs.github_username }}
        TOKEN: ${{ inputs.github_token }}
      run: |
        echo $METADATA_LINKS
        echo $ACTION_LINKS
        echo $DEB_LINKS
        echo $RELEASE
        echo $DL $MAX_RETRIES $RETRY_WAIT
        export METADATA_LINKS ACTION_LINKS DEB_LINKS RELEASE MAX_RETRIES RETRY_WAIT
        ./repo-download.sh
      shell: bash

    - name: Generate entry file
      env:
        REPO: ${{ github.repository }}
      run: |
        ./build-entry.sh
      shell: bash

    - name: Compress build files
      run: zip -r dist.zip dist
      shell: bash

    - name: Clean up
      run: rm -rf dist
      shell: bash
